# git のbranch を表示
autoload -U add-zsh-hook
autoload -Uz vcs_info

_set_tmux_window() {
  if [ "$TMUX" ]; then
    # tmux display
    #   -p 標準出力へ
    #   #I ウィンドウ番号
    #   #P ペイン番号
    export TMUX_WINDOW=$(tmux display -p '#I-#P')
  fi
}

# prompt-git-current-branch
function current_branch {
  if [[ "$PWD" = ${DOTFILES}'/\.git(/.*)?$' ]]; then
    echo "%{%B${fg[black]}%}no git%{${reset_color}%}%b"
    return
  fi
  name=$(basename "`git symbolic-ref HEAD 2> /dev/null`")
  if [[ -z $name ]]; then
    echo "%{%B${fg[black]}%} branch %{${reset_color}%}%b"
    return
  fi
  st=`git status 2> /dev/null`
  if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
    color=${bg[blue]}${fg[green]}
  elif [[ -n `echo "$st" | grep "^nothing added"` ]]; then
    color=${bg[red]}${fg[blue]}
  elif [[ -n `echo "$st" | grep "^# Untracked"` ]]; then
    color=${bg[red]}${fg_bold[white]}
  else
    color=${bg[red]}${fg_bold[white]}
  fi
  # %{...%} は囲まれた文字列がエスケープシーケンスであることを明示する
  # これをしないと右プロンプトの位置がずれる
  echo "%{$color%}%{%B%} $name %{%b%}%{$reset_color%}"
}

#======================================================================
# https://gist.github.com/yonchu/3935922
#======================================================================
# cd後自動でls
function chpwd() { ls_abbrev }

ls_abbrev() {
  # -a : Do not ignore entries starting with ..
  # -C : Force multi-column output.
  # -F : Append indicator (one of */=>@|) to entries.
  local cmd_ls='ls'
  local -a opt_ls
  opt_ls=('-CF' '--color=always')
  case "${OSTYPE}" in
  freebsd*|darwin*)
    if type gls > /dev/null 2>&1; then
      cmd_ls='gls'
    else
      # -G : Enable colorized output.
      opt_ls=('-CFG')
    fi
    ;;
  esac

  local ls_result
    ls_result=$(CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command $cmd_ls ${opt_ls[@]} | sed $'/^\e\[[0-9;]*m$/d')

    local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')

    if [ $ls_lines -gt  6 ]; then
      echo "$ls_result" | head -n 3
      echo '...'
      echo "$ls_result" | tail -n 3
      echo "$(command ls -1 -A | wc -l | tr -d ' ') files exist"
    else
      echo "$ls_result"
    fi
}

# 時刻更新
function TRAPALRM () { zle reset-prompt }
TMOUT=60

#==================================================
# git
#==================================================

function git_status {
  which git > /dev/null
  if [ $? -ne 0 ]; then
    echo "Plese install peco and git"
    return 1
  fi
  if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
    BUFFER='git status -s'
    zle accept-line
  else
    return 1
  fi
}
zle -N git_status
bindkey '^j^s' git_status

#==================================================
# paco
#==================================================
# See: https://github.com/iguto/dotfiles/blob/master/zsh.d/my_widgets.zsh#L69-L78
function peco-git-recent-branches
{
  which git peco > /dev/null
  if [ $? -ne 0 ]; then
    echo "Plese install peco and git"
    return 1
  fi
  if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
    local selected_branch=$( git for-each-ref --format='%(refname)' --sort=-committerdate  refs/heads | ruby -pne '$_.gsub!(/refs\/(heads|remotes)\//, "")' | peco )
    if [ -n "$selected_branch" ]; then
      BUFFER="git checkout $selected_branch"
      zle accept-line
    fi
  else
    return 1
  fi
}

zle -N peco-git-recent-branches
bindkey '^j^b' peco-git-recent-branches

function peco-tmux-session
{
  which tmux peco > /dev/null
  if [ $? -ne 0 ]; then
    echo "Please install peco and tmux"
    return 1
  fi
  local res
  res=$(\tmux list-sessions | peco | awk -F':' '{print $1}')
  if [ -n "$res" ]; then
    if [ -n "$TMUX" ]; then
      BUFFER="tmux switch-client -t $res"
    else
      BUFFER="tmux attach -t $res"
    fi
    zle accept-line
  fi
}
zle -N peco-tmux-session
bindkey '^s' peco-tmux-session

# See: http://qiita.com/xtetsuji/items/05f6f4c1b17854cdd75b
function peco-lscd {
  which peco > /dev/null
  if [ $? -ne 0 ]; then
    echo "Please install peco"
    return 1
  fi
  local dir="$( find . -maxdepth 1 -type d | sed -e 's;\./;;' | peco )"
  if [ ! -z "$dir" ] ; then
    cd "$dir"
  fi
}
zle -N peco-lscd
alias lscd='peco-lscd'

# See:https://github.com/ryoppy/cool-peco/blob/master/functions/cool-peco-filename-search
function peco-file-name-search
{
  which peco > /dev/null
  if [ $? -ne 0 ]; then
    echo "Please install peco"
    return 1
  fi
  local res=$(z | sort -rn | cut -c 12- | peco)
  if [ -n "$res" ]; then
    BUFFER+="cd $res"
    zle accept-line
  else
    return 1
  fi
}
zle -N peco-file-name-search
bindkey '^f' peco-file-name-search

# See: http://qiita.com/fmy/items/b92254d14049996f6ec3
function agvim () {
  vim $(ag $@ | peco --query "$LBUFFER" | awk -F : '{print "-c " $2 " " $1}')
}

